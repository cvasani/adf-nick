package com.packt.jdeveloper.cookbook.hr.components.model.view;

import com.packt.jdeveloper.cookbook.shared.bc.extensions.ExtViewObjectImpl;

import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaItem;
import oracle.jbo.ViewCriteriaItemValue;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 16 14:08:29 IST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class JobsLovImpl extends ExtViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public JobsLovImpl() {
    }
    
    //    In view object implementation : Careful this is not made for general use
            public void prepareRowSetForQuery(ViewRowSetImpl vrs) {
            //Set the value for bind variable ':bindVarDeptId' only
            //for default row set
            if(vrs.isDefaultRowSet()){
            vrs.setNamedWhereClauseParam( "bindVarDeptId", 100);
            }
            super.prepareRowSetForQuery(vrs);
            }


        //In view object implementation class : : Careful this is not made for general use
        //    This method adds location filter to all the Queries that are getting generated
        @Override
        public void prepareVOForQuery() {
            super.prepareVOForQuery();
            //Check if the LOC_CRITERIA is already applied on the VO
            //If yes, returns from this method
            String[] vcnames = getViewCriteriaManager().getApplyViewCriteriaNames();
            if (vcnames != null) {
                for (String name : vcnames) {
                    if (name.equals("LOC_CRITERIA")) {
                        return;
                    }
                }
            }
            // The following code create LOC_CRITERIA
            //and applies it to the VO.
            //This view criteria hold a condition to read
            //department rows from logged-in user's location
            ViewCriteria vc = createViewCriteria();
            vc.setName("LOC_CRITERIA");
            vc.setConjunction(ViewCriteria.VC_CONJ_AND);
            ViewCriteriaRow vcr = vc.createViewCriteriaRow();
            vc.insertRow(vcr);
            ViewCriteriaItem vci = vcr.ensureCriteriaItem("LocationId");
            vci.setOperator("=");
            ViewCriteriaItemValue vciv = vci.getValues().get(0);
            //getLoggedInLocId() returns logged in user's location
            vciv.setValue(100);
            applyViewCriteria(vc, true);
        }
        
    //In view object implementation class

    /**
     *  : Careful this is not made for general use
     * getViewCriteriaClause will be invoked for both database
     * query and in memory query mode. While overriding
     * developer will need to take care of this point.
     */
    @Override
    public String getViewCriteriaClause(boolean forQuery) {
        //Identifies the applied view criteria for the current
        //execution mode and call setUpperColumns on each VC
        ViewCriteria[] vcs =
            getApplyViewCriterias(forQuery ? ViewCriteria.CRITERIA_MODE_QUERY : ViewCriteria.CRITERIA_MODE_CACHE);
        if (vcs != null && vcs.length > 0) {
            for (ViewCriteria vc : vcs) {
                if (!vc.isUpperColumns()) {
                    vc.setUpperColumns(true);
                }
            }
        }
        return super.getViewCriteriaClause(forQuery);
    }

    //In the view object implementation class

    /**
     *  : Careful this is not made for general use
     * getCriteriaItemClause is invoked for both database query
     * and in memory query mode. While overriding developer
     * will need to take care of this point.
     */
    @Override
    public String getCriteriaItemClause(ViewCriteriaItem vci) {
        // This method generates custom WHERE clause for search
        // on DepartmentName to return the matching columns as well
        // NULL columns
        if (vci.getAttributeDef()
               .getName()
               .equals("DepartmentName") && vci.getViewCriteria()
                                               .getName()
                                               .contains("DepartmentVC") &&
            hasBindVarValue(vci.getViewCriteria(), "bindVarDeptNames")) {
            String attrName = null;
            //Handle database query and in-memory query separately
            if (vci.getViewCriteria().isCriteriaForQuery()) {
                return getItemClauseForDatabaseUse(vci);
            } else {
                return getItemClauseForInMemoryUse(vci);
            }
        }
        return super.getCriteriaItemClause(vci);
    }

    /**
     * Custom WHERE clause fragment for database query  : Careful this is not made for general use
     */
    protected String getItemClauseForDatabaseUse(ViewCriteriaItem vci) {
        String attrName = this.getEntityDef(0).getAliasName() + ".DEPARTMENT_NAME";
        return "((" + attrName + " = :bindVarDeptNames ) OR (" + attrName + " IS NULL))";
    }

    protected String getItemClauseForInMemoryUse(ViewCriteriaItem vci) {
        String attrName = "DepartmentName";
        return "((" + attrName + " = :bindVarDeptNames ) OR (" + attrName + " IS NULL))";
    }

    /**
     * Custom WHERE clause fragment for in-memory query
     */
    private boolean hasBindVarValue(ViewCriteria vc, String varName) {
        VariableValueManager varValueMgr = vc.ensureVariableManager();
        return varValueMgr.hasVariableValue(varName);
    }
}

