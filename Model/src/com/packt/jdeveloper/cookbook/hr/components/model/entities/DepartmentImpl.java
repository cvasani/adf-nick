package com.packt.jdeveloper.cookbook.hr.components.model.entities;

import com.packt.jdeveloper.cookbook.shared.bc.exceptions.ExtJboException;

import java.math.BigDecimal;

import oracle.adf.share.ADFContext;
import oracle.adf.share.security.SecurityContext;
import oracle.adf.share.security.binding.BindingPermissionDef;

import oracle.jbo.server.security.PermissionHelper;
import oracle.jbo.DataSecurityProvider;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.DBTransactionImpl;
import oracle.jbo.server.EntityCache;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.security.DataSecurityProviderManager;

import oracle.security.jps.ResourcePermission;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 02 15:51:06 IST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DepartmentImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        DepartmentId,
        DepartmentName,
        ManagerId,
        LocationId,
        IsNewRow,
        DepartmentManager,
        DepartmentEmployees,
        EmployeeEO1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return DepartmentImpl.AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return DepartmentImpl.AttributesEnum.firstIndex() + DepartmentImpl.AttributesEnum
                                                                              .staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = DepartmentImpl.AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DEPARTMENTID = AttributesEnum.DepartmentId.index();
    public static final int DEPARTMENTNAME = AttributesEnum.DepartmentName.index();
    public static final int MANAGERID = AttributesEnum.ManagerId.index();
    public static final int LOCATIONID = AttributesEnum.LocationId.index();
    public static final int ISNEWROW = AttributesEnum.IsNewRow.index();
    public static final int DEPARTMENTMANAGER = AttributesEnum.DepartmentManager.index();
    public static final int DEPARTMENTEMPLOYEES = AttributesEnum.DepartmentEmployees.index();
    public static final int EMPLOYEEEO1 = AttributesEnum.EmployeeEO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DepartmentImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.packt.jdeveloper.cookbook.hr.components.model.entities.Department");
    }


    /**
     * Gets the attribute value for DepartmentId, using the alias name DepartmentId.
     * @return the value of DepartmentId
     */
    public oracle.jbo.domain.Number getDepartmentId() {
        return (oracle.jbo.domain.Number) getAttributeInternal(DEPARTMENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepartmentId.
     * @param value value to set the DepartmentId
     */
    public void setDepartmentId(oracle.jbo.domain.Number value) {
        setAttributeInternal(DEPARTMENTID, value);
    }

    /**
     * Gets the attribute value for DepartmentName, using the alias name DepartmentName.
     * @return the value of DepartmentName
     */
    public String getDepartmentName() {
        return (String) getAttributeInternal(DEPARTMENTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepartmentName.
     * @param value value to set the DepartmentName
     */
    public void setDepartmentName(String value) {
        setAttributeInternal(DEPARTMENTNAME, value);
    }

    /**
     * Gets the attribute value for ManagerId, using the alias name ManagerId.
     * @return the value of ManagerId
     */
    public Number getManagerId() {
        return (Number) getAttributeInternal(MANAGERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ManagerId.
     * @param value value to set the ManagerId
     */
    public void setManagerId(Number value) {
        setAttributeInternal(MANAGERID, value);
    }

    /**
     * Gets the attribute value for LocationId, using the alias name LocationId.
     * @return the value of LocationId
     */
    public Number getLocationId() {
        return (Number) getAttributeInternal(LOCATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LocationId.
     * @param value value to set the LocationId
     */
    public void setLocationId(Number value) {
        setAttributeInternal(LOCATIONID, value);
    }

    /**
     * Gets the attribute value for IsNewRow, using the alias name IsNewRow.
     * @return the value of IsNewRow
     */
    public Boolean getIsNewRow() {
        return (Boolean) getAttributeInternal(ISNEWROW);
    }

    /**
     * Sets <code>value</code> as the attribute value for IsNewRow.
     * @param value value to set the IsNewRow
     */
    public void setIsNewRow(Boolean value) {
        setAttributeInternal(ISNEWROW, value);
    }

    /**
     * @return the associated entity EmployeesImpl.
     */
    public EmployeeImpl getDepartmentManager() {
        return (EmployeeImpl) getAttributeInternal(DEPARTMENTMANAGER);
    }

    /**
     * Sets <code>value</code> as the associated entity EmployeesImpl.
     */
    public void setDepartmentManager(EmployeeImpl value) {
        setAttributeInternal(DEPARTMENTMANAGER, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDepartmentEmployees() {
        return (RowIterator) getAttributeInternal(DEPARTMENTEMPLOYEES);
    }


    /**
     * @param departmentId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number departmentId) {
        return new Key(new Object[] { departmentId });
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getEmployeeEO1() {
        return (RowIterator) getAttributeInternal(EMPLOYEEEO1);
    }


    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        // get the department employeess accessor
        RowIterator departmentEmployees = this.getDepartmentEmployees();
        // iterate over all department employees
        while (departmentEmployees.hasNext()) {
        // get the department employee
        EmployeeImpl departmentEmployee =
        (EmployeeImpl)departmentEmployees.next();
        // remove employee
        departmentEmployee.remove();
        }
        super.remove();
    }

    @Override
    protected void doDML(int operation, TransactionEvent transactionEvent) {
        // TODO Implement this method
        
        // check for insert
        if (DML_INSERT == operation) {
            // get the department employees accessor
            RowIterator departmentEmployees = this.getDepartmentEmployees();
            // check for any employees
            if (!departmentEmployees.hasNext()) {
                // avoid inserting the department if there are no employees for it
                throw new ExtJboException("00006");
            }
        }
        
        


        // allow DML to proceed
        super.doDML(operation, transactionEvent);
    }
    
//    @Override
// ADF Security CHECKING THE dATA sEcurity for Entity
// ADF Security Guide and Vide by Kalyan : Code file o12adf-524995_SecurityVideo_Code 
    public boolean isAttributeUpdateable(int i) {

        DBTransactionImpl dbtransaction = (DBTransactionImpl)this.getDBTransaction();
        DataSecurityProvider provider;
        provider = new DataSecurityProviderManager(dbtransaction).getDataSecurityProvider();

        EntityCache ec = getEntityCache();
        AttributeDefImpl attrDef = (AttributeDefImpl)ec.getAttributeDef(i);
        BindingPermissionDef permDef = attrDef.getPermissionDef();

        String privToCheck = permDef == null ? null : permDef.findPrivilege(PermissionHelper.UPDATE_ACTION);

        //if one of the following is true, then no security has been enabled
        //on the entity attribute. Security is enabled by chosing the Edit
        //Security option on the attribute context menu in the Structure Window
        if (provider == null || permDef == null || privToCheck == null) {
            return true;
        }

        //check if attribute is new (insert case)
        if (getPostState() == STATUS_NEW || getPostState() == STATUS_INITIALIZED) {
            //build ResourcePermission
            //type = InsertEntityAttribute, Target = InsertEntityAttribute, Action = insert
            String type = "InsertEntityAttribute";
            String entityName = this.getEntityDef().getName();
            String action = "insert";


            SecurityContext securityCtx = ADFContext.getCurrent().getSecurityContext();

            ResourcePermission resourcePermission = new ResourcePermission(type, entityName, action);
            boolean userHasPermission = securityCtx.hasPermission(resourcePermission);
            if (userHasPermission) {
                return true;
            }
            return false;
        }

        //its an update of an existing attribute vaulue. So lets have the default implementation
        //handling this
        return super.isAttributeUpdateable(i);
    }

}

