package com.packt.jdeveloper.cookbook.hr.components.model.entities;

import com.packt.jdeveloper.cookbook.hr.components.model.view.EmployeeCountRowImpl;
import com.packt.jdeveloper.cookbook.shared.bc.extensions.ExtEntityImpl;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.ClobDomain;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 02 13:19:01 IST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmployeeImpl extends ExtEntityImpl {
//    private static final Object MAX_DEPARTMENT_EMPLOYEES = 2;

    @Override
    public void remove() {
        // get the associated department
        DepartmentImpl department = this.getEmployeeDepartment();
        // get number of employees in the department
        int numberOfEmployees =
        department.getDepartmentEmployees().getRowCount();
        // check whether last employee in the department
        if (numberOfEmployees == 1) {
        // delete the last employee
        super.remove();
        // delete the department as well
        department.remove();
        }
        else {
        // just delete the employee
        super.remove();
        }
//        super.remove();
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        EmployeeId,
        FirstName,
        LastName,
        Email,
        PhoneNumber,
        HireDate,
        Job,
        Salary,
        CommissionPct,
        ManagerId,
        DepartmentId,
        Image,
        Color,
        Biography,
        CodeSample,
        Employees,
        ManagerIdEmployees,
        DepartmentsManaged,
        DepartmentEmployees,
        EmployeeDepartment,
        EmployeeCount;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return com.packt
                      .jdeveloper
                      .cookbook
                      .hr
                      .components
                      .model
                      .entities
                      .EmployeeImpl
                      .AttributesEnum
                      .firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return com.packt
                      .jdeveloper
                      .cookbook
                      .hr
                      .components
                      .model
                      .entities
                      .EmployeeImpl
                      .AttributesEnum
                      .firstIndex() + com.packt
                                         .jdeveloper
                                         .cookbook
                                         .hr
                                         .components
                                         .model
                                         .entities
                                         .EmployeeImpl
                                         .AttributesEnum
                                         .staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = com.packt
                          .jdeveloper
                          .cookbook
                          .hr
                          .components
                          .model
                          .entities
                          .EmployeeImpl
                          .AttributesEnum
                          .values();
            }
            return vals;
        }
    }


    public static final int EMPLOYEEID = AttributesEnum.EmployeeId.index();
    public static final int FIRSTNAME = AttributesEnum.FirstName.index();
    public static final int LASTNAME = AttributesEnum.LastName.index();
    public static final int EMAIL = AttributesEnum.Email.index();
    public static final int PHONENUMBER = AttributesEnum.PhoneNumber.index();
    public static final int HIREDATE = AttributesEnum.HireDate.index();
    public static final int JOB = AttributesEnum.Job.index();
    public static final int SALARY = AttributesEnum.Salary.index();
    public static final int COMMISSIONPCT = AttributesEnum.CommissionPct.index();
    public static final int MANAGERID = AttributesEnum.ManagerId.index();
    public static final int DEPARTMENTID = AttributesEnum.DepartmentId.index();
    public static final int IMAGE = AttributesEnum.Image.index();
    public static final int COLOR = AttributesEnum.Color.index();
    public static final int BIOGRAPHY = AttributesEnum.Biography.index();
    public static final int CODESAMPLE = AttributesEnum.CodeSample.index();
    public static final int EMPLOYEES = AttributesEnum.Employees.index();
    public static final int MANAGERIDEMPLOYEES = AttributesEnum.ManagerIdEmployees.index();
    public static final int DEPARTMENTSMANAGED = AttributesEnum.DepartmentsManaged.index();
    public static final int DEPARTMENTEMPLOYEES = AttributesEnum.DepartmentEmployees.index();
    public static final int EMPLOYEEDEPARTMENT = AttributesEnum.EmployeeDepartment.index();
    public static final int EMPLOYEECOUNT = AttributesEnum.EmployeeCount.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EmployeeImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.packt.jdeveloper.cookbook.hr.components.model.entities.Employee");
    }


    /**
     * Gets the attribute value for EmployeeId, using the alias name EmployeeId.
     * @return the value of EmployeeId
     */
    public Integer getEmployeeId() {
        return (Integer) getAttributeInternal(EMPLOYEEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmployeeId.
     * @param value value to set the EmployeeId
     */
    public void setEmployeeId(Integer value) {
        setAttributeInternal(EMPLOYEEID, value);
    }

    /**
     * Gets the attribute value for FirstName, using the alias name FirstName.
     * @return the value of FirstName
     */
    public String getFirstName() {
        return (String) getAttributeInternal(FIRSTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for FirstName.
     * @param value value to set the FirstName
     */
    public void setFirstName(String value) {
        setAttributeInternal(FIRSTNAME, value);
    }

    /**
     * Gets the attribute value for LastName, using the alias name LastName.
     * @return the value of LastName
     */
    public String getLastName() {
        return (String) getAttributeInternal(LASTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastName.
     * @param value value to set the LastName
     */
    public void setLastName(String value) {
        setAttributeInternal(LASTNAME, value);
    }

    /**
     * Gets the attribute value for Email, using the alias name Email.
     * @return the value of Email
     */
    public String getEmail() {
        return (String) getAttributeInternal(EMAIL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Email.
     * @param value value to set the Email
     */
    public void setEmail(String value) {
        setAttributeInternal(EMAIL, value);
    }

    /**
     * Gets the attribute value for PhoneNumber, using the alias name PhoneNumber.
     * @return the value of PhoneNumber
     */
    public String getPhoneNumber() {
        return (String) getAttributeInternal(PHONENUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for PhoneNumber.
     * @param value value to set the PhoneNumber
     */
    public void setPhoneNumber(String value) {
        setAttributeInternal(PHONENUMBER, value);
    }

    /**
     * Gets the attribute value for HireDate, using the alias name HireDate.
     * @return the value of HireDate
     */
    public Timestamp getHireDate() {
        return (Timestamp) getAttributeInternal(HIREDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for HireDate.
     * @param value value to set the HireDate
     */
    public void setHireDate(Timestamp value) {
        setAttributeInternal(HIREDATE, value);
    }

    /**
     * Gets the attribute value for Job, using the alias name Job.
     * @return the value of Job
     */
    public String getJob() {
        return (String) getAttributeInternal(JOB);
    }

    /**
     * Sets <code>value</code> as the attribute value for Job.
     * @param value value to set the Job
     */
    public void setJob(String value) {
        setAttributeInternal(JOB, value);
    }

    /**
     * Gets the attribute value for Salary, using the alias name Salary.
     * @return the value of Salary
     */
    public BigDecimal getSalary() {
        return (BigDecimal) getAttributeInternal(SALARY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Salary.
     * @param value value to set the Salary
     */
    public void setSalary(BigDecimal value) {
        setAttributeInternal(SALARY, value);
    }

    /**
     * Gets the attribute value for CommissionPct, using the alias name CommissionPct.
     * @return the value of CommissionPct
     */
    public BigDecimal getCommissionPct() {
        return (BigDecimal) getAttributeInternal(COMMISSIONPCT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CommissionPct.
     * @param value value to set the CommissionPct
     */
    public void setCommissionPct(BigDecimal value) {
        setAttributeInternal(COMMISSIONPCT, value);
    }

    /**
     * Gets the attribute value for ManagerId, using the alias name ManagerId.
     * @return the value of ManagerId
     */
    public Integer getManagerId() {
        return (Integer) getAttributeInternal(MANAGERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ManagerId.
     * @param value value to set the ManagerId
     */
    public void setManagerId(Integer value) {
        setAttributeInternal(MANAGERID, value);
    }

    /**
     * Gets the attribute value for DepartmentId, using the alias name DepartmentId.
     * @return the value of DepartmentId
     */
    public Integer getDepartmentId() {
        return (Integer) getAttributeInternal(DEPARTMENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DepartmentId.
     * @param value value to set the DepartmentId
     */
    public void setDepartmentId(Integer value) {
        setAttributeInternal(DEPARTMENTID, value);
    }

    /**
     * Gets the attribute value for Image, using the alias name Image.
     * @return the value of Image
     */
    public String getImage() {
        return (String) getAttributeInternal(IMAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Image.
     * @param value value to set the Image
     */
    public void setImage(String value) {
        setAttributeInternal(IMAGE, value);
    }

    /**
     * Gets the attribute value for Color, using the alias name Color.
     * @return the value of Color
     */
    public String getColor() {
        return (String) getAttributeInternal(COLOR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Color.
     * @param value value to set the Color
     */
    public void setColor(String value) {
        setAttributeInternal(COLOR, value);
    }

    /**
     * Gets the attribute value for Biography, using the alias name Biography.
     * @return the value of Biography
     */
    public ClobDomain getBiography() {
        return (ClobDomain) getAttributeInternal(BIOGRAPHY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Biography.
     * @param value value to set the Biography
     */
    public void setBiography(ClobDomain value) {
        setAttributeInternal(BIOGRAPHY, value);
    }

    /**
     * Gets the attribute value for CodeSample, using the alias name CodeSample.
     * @return the value of CodeSample
     */
    public ClobDomain getCodeSample() {
        return (ClobDomain) getAttributeInternal(CODESAMPLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CodeSample.
     * @param value value to set the CodeSample
     */
    public void setCodeSample(ClobDomain value) {
        setAttributeInternal(CODESAMPLE, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getEmployees() {
        return (RowIterator) getAttributeInternal(EMPLOYEES);
    }

    /**
     * @return the associated entity EmployeeImpl.
     */
    public EmployeeImpl getManagerIdEmployees() {
        return (EmployeeImpl) getAttributeInternal(MANAGERIDEMPLOYEES);
    }

    /**
     * Sets <code>value</code> as the associated entity EmployeeImpl.
     */
    public void setManagerIdEmployees(EmployeeImpl value) {
        setAttributeInternal(MANAGERIDEMPLOYEES, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDepartmentsManaged() {
        return (RowIterator) getAttributeInternal(DEPARTMENTSMANAGED);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getDepartmentEmployees() {
        return (RowIterator) getAttributeInternal(DEPARTMENTEMPLOYEES);
    }

    /**
     * @return the associated entity DepartmentImpl.
     */
    public DepartmentImpl getEmployeeDepartment() {
        return (DepartmentImpl) getAttributeInternal(EMPLOYEEDEPARTMENT);
    }

    /**
     * Sets <code>value</code> as the associated entity DepartmentImpl.
     */
    public void setEmployeeDepartment(DepartmentImpl value) {
        setAttributeInternal(EMPLOYEEDEPARTMENT, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> EmployeeCount.
     */
    public RowSet getEmployeeCount() {
        return (RowSet) getAttributeInternal(EMPLOYEECOUNT);
    }

    /**
     * Validation method for Employee.
     */
    public boolean validateEmployee() {
        // get the EmployeeCount view accessor
        final int MAX_DEPARTMENT_EMPLOYEES = 2;
        RowSet employeeCount = this.getEmployeeCount();
        
        // setup the DepartmentId bind variable
        if ( this.getDepartmentId() == null)
                                           {
                                               this.setDepartmentId(100);}
        employeeCount.defineNamedWhereClauseParam("DepartmentId", null, null);
        employeeCount.setNamedWhereClauseParam("DepartmentId", this.getDepartmentId());
        // run the View Object query
        employeeCount.executeQuery();
        
        
//        employeeCount.setNamedWhereClauseParam("DepartmentId", 200);
//        employeeCount.executeQuery();
        
        
//        employeeCount.setNamedWhereClauseParam("DepartmentId", 109);
//        employeeCount.executeQuery();
        // check results
        if (employeeCount.hasNext()) {
            // get the EmployeeCount row
            EmployeeCountRowImpl employeeCountRow = (EmployeeCountRowImpl) employeeCount.next();
            // get the deparment employee count
            oracle.jbo.domain.Number departmentEmployees = employeeCountRow.getEmployeeCount();
            if (departmentEmployees.compareTo(MAX_DEPARTMENT_EMPLOYEES) > 0) {
                return false;
            }
        }
        return true;
    }


    /**
     * @param employeeId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer employeeId) {
        return new Key(new Object[] { employeeId });
    }


}

