package com.packt.jdeveloper.cookbook.shared.bc.test;

import com.packt.jdeveloper.cookbook.hr.components.model.view.DepartmentsImpl;
import com.packt.jdeveloper.cookbook.hr.components.model.view.EmployeeCountImpl;
import com.packt.jdeveloper.cookbook.hr.components.model.view.EmployeesImpl;
import com.packt.jdeveloper.cookbook.hr.components.model.view.EmployeesRowImpl;
import com.packt.jdeveloper.cookbook.shared.bc.database.SQLProcedure;


import com.packt.jdeveloper.cookbook.shared.bc.extensions.ExtViewObjectImpl;
import com.packt.jdeveloper.cookbook.shared.bc.test.common.HRComponentsAppModule;

import com.packt.jdeveloper.cookbook.shared.bc.utilviews.ApplicationModulePoolStatisticsImpl;

import java.math.BigDecimal;

import oracle.jbo.server.ViewLinkImpl;


import com.packt.jdeveloper.cookbook.shared.bc.extensions.ExtApplicationModuleImpl;


import java.math.BigDecimal;

import java.sql.Types;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 02 13:48:57 IST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HRComponentsAppModuleImpl extends ExtApplicationModuleImpl implements HRComponentsAppModule {

    private static final ADFLogger LOGGER = ADFLogger.createADFLogger(ExtApplicationModuleImpl.class);
    public static final String DEFAULT_DEPARTMENT_ID_KEY = "DEFAULT_DEPARTMENT_ID";
    public static final Number DEFAULT_DEPARTMENT_ID = new Number(101);
    /**
     * This is the default constructor (do not remove).
     */
    public HRComponentsAppModuleImpl() {
    }

    @Override
    public void getAMPoolStatistics() {
        // TODO Implement this method
        super.getAMPoolStatistics();
    }

//    @Override
//    public ExtViewObjectImpl getApplicationModulePoolStatistics() {
//        // TODO Implement this method
//        return super.getApplicationModulePoolStatistics();
//    }
    
        public Boolean getApplicationModulePoolStatistics2() {
            // TODO Implement this method
        ExtViewObjectImpl applicationModulePoolStatistics = (ExtViewObjectImpl)getApplicationModulePoolStatistics();
        Boolean v_return = (applicationModulePoolStatistics == null) ? false : true;
        return v_return;
    }


    @Override
    public int getUserAuthorityLevel() {
        // TODO Implement this method
        return super.getUserAuthorityLevel();
    }

    @Override
    public String getUserPrincipalName() {
        // TODO Implement this method
        return super.getUserPrincipalName();
    }


    @Override
    public Object getCustomData(String key) {
        // TODO Implement this method
//        return super.getCustomData(key);
        return DEFAULT_DEPARTMENT_ID_KEY.equals(key)
        ? DEFAULT_DEPARTMENT_ID : null;
    }

    /**
     * Test method executed by the Business Component Browser.
     */
    public void testSQLProcedure() {
        Number employeeId = new Number(108);

        SQLProcedure procIn = new SQLProcedure("TEST_PKG.TEST_PROC_IN", this.getDBTransaction());
        procIn.setIN(employeeId);
        procIn.execute();

        SQLProcedure procInOut = new SQLProcedure("TEST_PKG.TEST_PROC_IN_OUT", this.getDBTransaction());
        procInOut.setINOUT(employeeId, Types.NUMERIC);
        procInOut.execute();
        Number managerId =
            procInOut.getOUT(1) != null ? new Number(((BigDecimal) procInOut.getOUT(1)).intValue()) : null;
        LOGGER.info("managerId ==> " + managerId);

        SQLProcedure funcIn = new SQLProcedure("TEST_PKG.TEST_FUNC_IN", this.getDBTransaction());
        funcIn.setIN(managerId);
        funcIn.setRETURN(Types.BIGINT); // test out of sequence RETURN
        funcIn.setRETURN(Types.CHAR); // test multiple RETURNs
        funcIn.execute();
        String managerLastName = (String) funcIn.getRETURN();
        LOGGER.info("managerLastName ==> " + managerLastName);

        SQLProcedure funcInOut = new SQLProcedure("TEST_PKG.TEST_FUNC_IN_OUT", this.getDBTransaction());
        funcInOut.setRETURN(Types.CHAR);
        funcInOut.setINOUT(managerLastName, Types.CHAR);
        funcInOut.execute();
        String managerFirstName = (String) funcInOut.getOUT(2);
        String email = (String) funcInOut.getRETURN();
        LOGGER.info("managerFirstName ==> " + managerFirstName);
        LOGGER.info("email ==> " + email);
    }


    /**
     * Container's getter for Employees1.
     * @return Employees1
     */
    public EmployeesImpl getEmployees() {
        return (EmployeesImpl) findViewObject("Employees");
    }

    /**
     * Container's getter for Employees2.
     * @return Employees2
     */
    public EmployeesImpl getManagers() {
        return (EmployeesImpl) findViewObject("Managers");
    }

    /**
     * Container's getter for EmpManagerFkLink1.
     * @return EmpManagerFkLink1
     */
    public ViewLinkImpl getEmpManagerFkLink1() {
        return (ViewLinkImpl) findViewLink("EmpManagerFkLink1");
    }


    /**
     * Container's getter for Departments1.
     * @return Departments1
     */
    public DepartmentsImpl getDepartments() {
        return (DepartmentsImpl) findViewObject("Departments");
    }

// Remove employee from collection. Just from collection 
    public void removeEmployeeFromCollection() {
    // get the current employee
    EmployeesRowImpl employee =
    (EmployeesRowImpl)(this.getEmployees().getCurrentRow());
    // remove employee from collection
    if (employee != null) {
    employee.removeFromCollection();
    }
    }


    /**
     * Container's getter for EmployeeCount1.
     * @return EmployeeCount1
     */
    public EmployeeCountImpl getEmployeeCount1() {
        return (EmployeeCountImpl) findViewObject("EmployeeCount1");
    }
    
    public void searchEmployeesUsingAdditionalCriteria() {
    // invoke searchUsingAdditionalCriteria() to create
    // result set based on View criteria item
    // data obtained from another view object's rowset
//    this.getEmployees()
//    .searchUsingAdditionalCriteria(this.getCascadingLovs(),
//    new String[] { "EmployeeId" });
//    
//        this.getEmployees()
//        .searchUsingAdditionalCriteria(this.getCascadingLovs(),
//        new String[] { "EmployeeId", "DepartmentId"});


        EmployeesImpl additionalCriteria =
            this.getEmployees();
                additionalCriteria.searchUsingAdditionalCriteria(this.getCascadingLovs(), new String[] { "EmployeeId" });

        additionalCriteria
            .searchUsingAdditionalCriteria(this.getCascadingLovs(),
            new String[] { "EmployeeId", "DepartmentId"});
        
        additionalCriteria.setViewCriteriaCaseInsensitive(true);
    
    }

    /**
     * Container's getter for CascadingLovsView1.
     * @return CascadingLovsView1
     */
    public ViewObjectImpl getCascadingLovs() {
        return (ViewObjectImpl) findViewObject("CascadingLovs");
    }

    /**
     * @param commissionPctAdjustment
     */
    public void adjustCommission(Number commissionPctAdjustment) {
    // execute the Employees view object query to createa rowset
    this.getEmployees().executeQuery();
    // adjust the employees commission
    this.getEmployees().adjustCommission(commissionPctAdjustment);
    }


    /**
     * Container's getter for ApplicationModulePoolStatistics1.
     * @return ApplicationModulePoolStatistics1
     */
    public ApplicationModulePoolStatisticsImpl getApplicationModulePoolStatistics() {
        return (ApplicationModulePoolStatisticsImpl) findViewObject("ApplicationModulePoolStatistics");
    }
    
// Preparing for the employee creation    
    public void prepare() {
    // get the Employees view object instance
    EmployeesImpl employees = this.getEmployees();
    // remove all rows from rowset
    employees.executeEmptyRowSet();
    // create a new employee row
    Row employee = employees.createRow();
    // add the new employee to the rowset
    employees.insertRow(employee);
    }
    

}

